// ADA
/* Implement Recursive Binary search and determine the time required to search an element.
   Repeat the experiment for different values of N and plot a graph of the time taken versus N. */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <ctype.h>
#include <conio.h>
#include <time.h>

void delay()
{
    int k=0,i;
    for(i=0;i<50000;i++)
    {
        k = k + 1;
    }
}

int binarySearch(int arr[], int l, int r, int x)
{
    int mid;
    if(r >= l)
    {
        delay(); // Delay needs to be added otherwise time taken is so fast that it will always be equal to 0 seconds
        mid = l + (r - l)/2; // If the element is present at the middle itself
        if(arr[mid] == x) 
        {
            return mid; // If element is smaller than mid, then it can only be present in left subarray
        }   
        if(arr[mid] > x)
        {
            return binarySearch(arr, l, mid-1, x); // Else the element can only be present in right subarray
        }
        return binarySearch(arr, mid+1, r, x);
    }    
    return -1; // We reach here when element is not present in array
}

int main()
{
    int x,index,size,i;
    printf("Enter the size of the array: ");
    scanf("%d",&size);
    int arr[size];
    time_t start,end;                          
    for(i=0;i<size;i++) // In binary search the input data has to be in sorted order
    {
        arr[i] = i;
    }
    printf("\nEnter the element to search for: ");
    scanf("%d",&x);
    start = clock();
    index = binarySearch(arr, 0, size-1, x);
    end = clock();
    if(index == -1)
    { 
        printf("\nElement is not present in array");
    }
    else
    {
        printf("\nElement is present at index %d", index);
    }
    printf("\nTime taken: %f",(difftime(end,start)));
    return 0;
}
