// ADA 
// Program to implement Johnson Trotter algorithm to generate permutations

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <ctype.h>
#include <conio.h>
#include <time.h>
#include <stdbool.h>

bool LEFT_TO_RIGHT = true;
bool RIGHT_TO_LEFT = false;
int p,q;

int searchArr(int a[], int n, int mobile)
{
    int i;
    for(i = 1; i <= n; i++)
    {
        if(a[i] == mobile)
        {
            return i;
        }
    }
    return -1;    
}

int getMobile(int a[], bool dir[], int n)
{
    int mobile_prev = 0, mobile = 0,i;
    for(i = 1; i <= n; i++)
    {
        if(dir[a[i]] == RIGHT_TO_LEFT && i!=1)
        {
            if(a[i] > a[i-1] && a[i] > mobile_prev)
            {
                mobile = a[i];
                mobile_prev = mobile;
            }
        }
        if(dir[a[i]] == LEFT_TO_RIGHT && i!=n)
        {
            if(a[i] > a[i+1] && a[i] > mobile_prev)
            {
                mobile = a[i];
                mobile_prev = mobile;
            }
        }
    }
    if(mobile == 0 && mobile_prev == 0)
    {
        return 0;
    }    
    else
    {
        return mobile;
    }
}

void printOnePerm(int a[], bool dir[], int n)
{
    int mobile = getMobile(a, dir, n);
    int pos = searchArr(a, n, mobile);
    int i,temp;
    if(dir[a[pos]] == RIGHT_TO_LEFT)  // swap(a[pos], a[pos-1])
    {                      
        temp=a[pos];
        a[pos]=a[pos-1];
        a[pos-1]=temp;
    }
    else if(dir[a[pos]] == LEFT_TO_RIGHT) // swap(a[pos], a[pos+1])
    {                       
        temp=a[pos];
        a[pos]=a[pos+1];
        a[pos+1]=temp;
    }
    for(i = 1; i <= n; i++)
    {
        if(a[i] > mobile)
        {
            if(dir[a[i]] == LEFT_TO_RIGHT)
            {
                dir[a[i]] = RIGHT_TO_LEFT;
            }
            else if(dir[a[i]] == RIGHT_TO_LEFT)
            {
                dir[a[i]] = LEFT_TO_RIGHT;
            }
        }
    }
    for(i = 1; i <= n; i++)
    {
        printf("%d ",a[i]);
    }
    printf("\n");
}

int fact(int n)
{
    int res = 1,i;
    for(i = 1; i <= n; i++)
    {    
        res = res * i;
    }
    return res;
}

void printPermutation(int n)
{
    int a[n],i,j;
    bool dir[n];
    for(i = 1; i <= n; i++)
    {
        a[i] = i;
        printf("%d ",a[i]);
    }
    printf("\n");
    for(i = 1; i <= n; i++)
    {
        dir[i] = RIGHT_TO_LEFT;
    }
    j = fact(n);
    for(i = 1; i < j; i++)
    {
        printOnePerm(a, dir, n);
    }
}

int main()
{
    int n;
    printf("Enter the number of integers: ");
    scanf("%d",&n);
    printf("\nPermutations:\n");
    printPermutation(n);
    return 0;
}
