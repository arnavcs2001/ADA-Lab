// ADA 
// Find Minimum Cost Spanning Tree of a given undirected graph using Primâ€™s algorithm.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <ctype.h>
#include <conio.h>
#include <time.h>
#include <stdbool.h>
#include <limits.h>

int V;
  
int minKey(int key[], bool mstSet[]) /* A utility function to find the vertex with minimum key value, 
                                        from the set of vertices not yet included in MST */
{
    int min = INT_MAX, min_index,v;
    for(v = 0; v < V; v++)
    {
        if(mstSet[v] == false && key[v] < min)
        {
            min = key[v], min_index = v;
        }
    }
    return min_index;
}
  
void printMST(int parent[], int graph[V][V])
{
    int i,weight=0;
    printf("\nEdge \tWeight\n");
    for(i = 1; i < V; i++)
    {
        printf("%d - %d: \t%d \n", parent[i], i, graph[i][parent[i]]);
        weight = weight + graph[i][parent[i]];
    }
    printf("\nWeight of the MST: %d\n",weight);
}
  
void MST(int graph[V][V])
{
    int i,count;
    int parent[V]; // Array to store constructed MST
    int key[V];
    bool mstSet[V]; // To represent set of vertices included in MST
  
    for(i = 0; i < V; i++) // Initialize all keys as INFINITE
    {
        key[i] = INT_MAX; 
        mstSet[i] = false;
    }
    
    key[0] = 0;
    parent[0] = -1; // First node is always root of MST so it does not have a parent
  
    for(count = 0; count < V - 1; count++) // The MST will have V vertices
    {
        int u,v;
        u = minKey(key, mstSet); // Pick the minimum key vertex from the set of vertices not yet included in MST
        mstSet[u] = true; // Add the picked vertex to the MST Set
        // Update key value and parent index of the adjacent vertices of the picked vertex.
        // Consider only those vertices which are not yet included in MST
        for(v = 0; v < V; v++)
        {
            if (graph[u][v]!=0 && mstSet[v] == false && graph[u][v] < key[v])
            {    
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }
    printMST(parent, graph);
}
  
int main()
{
    int i,j;
    printf("Enter the number of vertices: ");
    scanf("%d",&V);
    int graph[V][V];
    printf("\nEnter the cost/weight matrix: \n");
    for(i=0;i<V;i++)
    {
        for(j=0;j<V;j++)
        {
            scanf("%d",&graph[i][j]);
        }
    }
    MST(graph);
    return 0;
}
